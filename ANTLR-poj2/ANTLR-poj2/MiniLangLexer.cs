//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/elena/OneDrive/Documente/Facultate-INFORMATICA/An_2/sem1/LFC/ANTLR-poj2/ANTLR-poj2/MiniCPP.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MiniLangLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		IF=10, ELSE=11, FOR=12, WHILE=13, INT=14, FLOAT=15, STRING=16, VOID=17, 
		ID=18, NUMBER=19, STRING_LITERAL=20, WS=21;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"IF", "ELSE", "FOR", "WHILE", "INT", "FLOAT", "STRING", "VOID", "ID", 
		"NUMBER", "STRING_LITERAL", "WS"
	};


	public MiniLangLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MiniLangLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'='", "';'", "'('", "')'", "'{'", "'}'", "'+'", "'-'", "','", "'if'", 
		"'else'", "'for'", "'while'", "'int'", "'float'", "'string'", "'void'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "IF", "ELSE", 
		"FOR", "WHILE", "INT", "FLOAT", "STRING", "VOID", "ID", "NUMBER", "STRING_LITERAL", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCPP.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniLangLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,21,129,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,1,
		0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
		1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,
		12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,5,17,104,
		8,17,10,17,12,17,107,9,17,1,18,4,18,110,8,18,11,18,12,18,111,1,19,1,19,
		5,19,116,8,19,10,19,12,19,119,9,19,1,19,1,19,1,20,4,20,124,8,20,11,20,
		12,20,125,1,20,1,20,1,117,0,21,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
		19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
		1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,
		0,9,10,13,13,32,32,132,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
		0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
		0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
		0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
		1,0,0,0,1,43,1,0,0,0,3,45,1,0,0,0,5,47,1,0,0,0,7,49,1,0,0,0,9,51,1,0,0,
		0,11,53,1,0,0,0,13,55,1,0,0,0,15,57,1,0,0,0,17,59,1,0,0,0,19,61,1,0,0,
		0,21,64,1,0,0,0,23,69,1,0,0,0,25,73,1,0,0,0,27,79,1,0,0,0,29,83,1,0,0,
		0,31,89,1,0,0,0,33,96,1,0,0,0,35,101,1,0,0,0,37,109,1,0,0,0,39,113,1,0,
		0,0,41,123,1,0,0,0,43,44,5,61,0,0,44,2,1,0,0,0,45,46,5,59,0,0,46,4,1,0,
		0,0,47,48,5,40,0,0,48,6,1,0,0,0,49,50,5,41,0,0,50,8,1,0,0,0,51,52,5,123,
		0,0,52,10,1,0,0,0,53,54,5,125,0,0,54,12,1,0,0,0,55,56,5,43,0,0,56,14,1,
		0,0,0,57,58,5,45,0,0,58,16,1,0,0,0,59,60,5,44,0,0,60,18,1,0,0,0,61,62,
		5,105,0,0,62,63,5,102,0,0,63,20,1,0,0,0,64,65,5,101,0,0,65,66,5,108,0,
		0,66,67,5,115,0,0,67,68,5,101,0,0,68,22,1,0,0,0,69,70,5,102,0,0,70,71,
		5,111,0,0,71,72,5,114,0,0,72,24,1,0,0,0,73,74,5,119,0,0,74,75,5,104,0,
		0,75,76,5,105,0,0,76,77,5,108,0,0,77,78,5,101,0,0,78,26,1,0,0,0,79,80,
		5,105,0,0,80,81,5,110,0,0,81,82,5,116,0,0,82,28,1,0,0,0,83,84,5,102,0,
		0,84,85,5,108,0,0,85,86,5,111,0,0,86,87,5,97,0,0,87,88,5,116,0,0,88,30,
		1,0,0,0,89,90,5,115,0,0,90,91,5,116,0,0,91,92,5,114,0,0,92,93,5,105,0,
		0,93,94,5,110,0,0,94,95,5,103,0,0,95,32,1,0,0,0,96,97,5,118,0,0,97,98,
		5,111,0,0,98,99,5,105,0,0,99,100,5,100,0,0,100,34,1,0,0,0,101,105,7,0,
		0,0,102,104,7,1,0,0,103,102,1,0,0,0,104,107,1,0,0,0,105,103,1,0,0,0,105,
		106,1,0,0,0,106,36,1,0,0,0,107,105,1,0,0,0,108,110,7,2,0,0,109,108,1,0,
		0,0,110,111,1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,38,1,0,0,0,113,
		117,5,34,0,0,114,116,9,0,0,0,115,114,1,0,0,0,116,119,1,0,0,0,117,118,1,
		0,0,0,117,115,1,0,0,0,118,120,1,0,0,0,119,117,1,0,0,0,120,121,5,34,0,0,
		121,40,1,0,0,0,122,124,7,3,0,0,123,122,1,0,0,0,124,125,1,0,0,0,125,123,
		1,0,0,0,125,126,1,0,0,0,126,127,1,0,0,0,127,128,6,20,0,0,128,42,1,0,0,
		0,5,0,105,111,117,125,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
