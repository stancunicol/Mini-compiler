//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MiniCPP.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MiniCPPParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, INCLUDE=3, IF=4, ELSE=5, FOR=6, WHILE=7, RETURN=8, INT=9, 
		FLOAT=10, STRING=11, VOID=12, ID=13, NUMBER=14, STRING_LITERAL=15, LINE_COMMENT=16, 
		BLOCK_COMMENT=17, ASSIGN=18, PLUS_ASSIGN=19, MINUS_ASSIGN=20, MULT_ASSIGN=21, 
		DIV_ASSIGN=22, MOD_ASSIGN=23, PLUS=24, MINUS=25, STAR=26, DIV=27, AMP=28, 
		AND=29, OR=30, MOD=31, EQUAL=32, NOT_EQUAL=33, GREATER_EQUAL=34, LESS_EQUAL=35, 
		INCREMENT=36, DECREMENT=37, NOT=38, SEMICOLON=39, DOT=40, GREATER=41, 
		LESS=42, LPAREN=43, RPAREN=44, LBRACE=45, RBRACE=46, COMMA=47, WS=48;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_includeStmt = 2, RULE_varDecl = 3, 
		RULE_assignment = 4, RULE_funcDecl = 5, RULE_funcCall = 6, RULE_controlStruct = 7, 
		RULE_block = 8, RULE_returnStmt = 9, RULE_structDecl = 10, RULE_consructorDecl = 11, 
		RULE_destructorDecl = 12, RULE_expr = 13, RULE_paramList = 14, RULE_param = 15;
	public static readonly string[] ruleNames = {
		"program", "statement", "includeStmt", "varDecl", "assignment", "funcDecl", 
		"funcCall", "controlStruct", "block", "returnStmt", "structDecl", "consructorDecl", 
		"destructorDecl", "expr", "paramList", "param"
	};

	private static readonly string[] _LiteralNames = {
		null, "'struct'", "'~'", "'#include'", "'if'", "'else'", "'for'", "'while'", 
		"'return'", "'int'", "'float'", "'string'", "'void'", null, null, null, 
		null, null, "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'+'", "'-'", 
		"'*'", "'/'", "'&'", "'&&'", "'||'", "'%'", "'=='", "'!='", "'>='", "'<='", 
		"'++'", "'--'", "'!'", "';'", "'.'", "'>'", "'<'", "'('", "')'", "'{'", 
		"'}'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "INCLUDE", "IF", "ELSE", "FOR", "WHILE", "RETURN", "INT", 
		"FLOAT", "STRING", "VOID", "ID", "NUMBER", "STRING_LITERAL", "LINE_COMMENT", 
		"BLOCK_COMMENT", "ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", 
		"DIV_ASSIGN", "MOD_ASSIGN", "PLUS", "MINUS", "STAR", "DIV", "AMP", "AND", 
		"OR", "MOD", "EQUAL", "NOT_EQUAL", "GREATER_EQUAL", "LESS_EQUAL", "INCREMENT", 
		"DECREMENT", "NOT", "SEMICOLON", "DOT", "GREATER", "LESS", "LPAREN", "RPAREN", 
		"LBRACE", "RBRACE", "COMMA", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCPP.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCPPParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniCPPParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniCPPParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniCPPParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 32;
				statement();
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 16378L) != 0) );
			State = 37;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext funcDecl() {
			return GetRuleContext<FuncDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ControlStructContext controlStruct() {
			return GetRuleContext<ControlStructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeStmtContext includeStmt() {
			return GetRuleContext<IncludeStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCPPParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclContext structDecl() {
			return GetRuleContext<StructDeclContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 49;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 39;
				varDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 40;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 41;
				funcDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 42;
				controlStruct();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 43;
				includeStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 44;
				returnStmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 45;
				funcCall();
				State = 46;
				Match(SEMICOLON);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 48;
				structDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(MiniCPPParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MiniCPPParser.STRING_LITERAL, 0); }
		public IncludeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includeStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterIncludeStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitIncludeStmt(this);
		}
	}

	[RuleVersion(0)]
	public IncludeStmtContext includeStmt() {
		IncludeStmtContext _localctx = new IncludeStmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_includeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(INCLUDE);
			State = 52;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCPPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCPPParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MiniCPPParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MiniCPPParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MiniCPPParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniCPPParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MiniCPPParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(MiniCPPParser.AMP, 0); }
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3584L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STAR || _la==AMP) {
				{
				State = 55;
				_la = TokenStream.LA(1);
				if ( !(_la==STAR || _la==AMP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 58;
			Match(ID);
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 59;
				Match(ASSIGN);
				State = 60;
				expr(0);
				}
			}

			State = 63;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCPPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniCPPParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCPPParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGN() { return GetToken(MiniCPPParser.PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_ASSIGN() { return GetToken(MiniCPPParser.MINUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_ASSIGN() { return GetToken(MiniCPPParser.MULT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN() { return GetToken(MiniCPPParser.DIV_ASSIGN, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 8, RULE_assignment);
		int _la;
		try {
			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65;
				Match(ID);
				State = 66;
				Match(ASSIGN);
				State = 67;
				expr(0);
				State = 68;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70;
				Match(ID);
				State = 71;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7864320L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 72;
				expr(0);
				State = 73;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCPPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCPPParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCPPParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCPPParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MiniCPPParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MiniCPPParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MiniCPPParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(MiniCPPParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitFuncDecl(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclContext funcDecl() {
		FuncDeclContext _localctx = new FuncDeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_funcDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7680L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 78;
			Match(ID);
			State = 79;
			Match(LPAREN);
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3584L) != 0)) {
				{
				State = 80;
				paramList();
				}
			}

			State = 83;
			Match(LBRACE);
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16378L) != 0)) {
				{
				{
				State = 84;
				statement();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 90;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCPPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCPPParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCPPParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCPPParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCPPParser.COMMA, i);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 12, RULE_funcCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(ID);
			State = 93;
			Match(LPAREN);
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9002519945216L) != 0)) {
				{
				State = 94;
				expr(0);
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 95;
					Match(COMMA);
					State = 96;
					expr(0);
					}
					}
					State = 101;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 104;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlStructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MiniCPPParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCPPParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCPPParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MiniCPPParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MiniCPPParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MiniCPPParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(MiniCPPParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(MiniCPPParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(MiniCPPParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(MiniCPPParser.DECREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ControlStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlStruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterControlStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitControlStruct(this);
		}
	}

	[RuleVersion(0)]
	public ControlStructContext controlStruct() {
		ControlStructContext _localctx = new ControlStructContext(Context, State);
		EnterRule(_localctx, 14, RULE_controlStruct);
		int _la;
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 106;
				Match(IF);
				State = 107;
				Match(LPAREN);
				State = 108;
				expr(0);
				State = 109;
				Match(RPAREN);
				State = 110;
				block();
				State = 113;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 111;
					Match(ELSE);
					State = 112;
					block();
					}
					break;
				}
				}
				break;
			case ELSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 115;
				Match(ELSE);
				State = 116;
				block();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 117;
				Match(WHILE);
				State = 118;
				Match(LPAREN);
				State = 119;
				expr(0);
				State = 120;
				Match(RPAREN);
				State = 121;
				block();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 123;
				Match(FOR);
				State = 124;
				Match(LPAREN);
				State = 127;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT:
				case FLOAT:
				case STRING:
					{
					State = 125;
					varDecl();
					}
					break;
				case ID:
				case NUMBER:
				case STRING_LITERAL:
				case AMP:
				case INCREMENT:
				case DECREMENT:
				case LPAREN:
					{
					State = 126;
					expr(0);
					}
					break;
				case SEMICOLON:
					break;
				default:
					break;
				}
				State = 129;
				Match(SEMICOLON);
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9002519945216L) != 0)) {
					{
					State = 130;
					expr(0);
					}
				}

				State = 133;
				Match(SEMICOLON);
				State = 138;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 134;
					expr(0);
					}
					break;
				case 2:
					{
					State = 135;
					Match(INCREMENT);
					}
					break;
				case 3:
					{
					State = 136;
					Match(DECREMENT);
					}
					break;
				case 4:
					{
					State = 137;
					assignment();
					}
					break;
				}
				State = 140;
				Match(RPAREN);
				State = 141;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCPPParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCPPParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(LBRACE);
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16378L) != 0)) {
				{
				{
				State = 145;
				statement();
				}
				}
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 151;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MiniCPPParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCPPParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_returnStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(RETURN);
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9002519945216L) != 0)) {
				{
				State = 154;
				expr(0);
				}
			}

			State = 157;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCPPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCPPParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCPPParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCPPParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext[] funcDecl() {
			return GetRuleContexts<FuncDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext funcDecl(int i) {
			return GetRuleContext<FuncDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConsructorDeclContext[] consructorDecl() {
			return GetRuleContexts<ConsructorDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConsructorDeclContext consructorDecl(int i) {
			return GetRuleContext<ConsructorDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DestructorDeclContext[] destructorDecl() {
			return GetRuleContexts<DestructorDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DestructorDeclContext destructorDecl(int i) {
			return GetRuleContext<DestructorDeclContext>(i);
		}
		public StructDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterStructDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitStructDecl(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclContext structDecl() {
		StructDeclContext _localctx = new StructDeclContext(Context, State);
		EnterRule(_localctx, 20, RULE_structDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			Match(T__0);
			State = 160;
			Match(ID);
			State = 161;
			Match(LBRACE);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 15876L) != 0)) {
				{
				State = 166;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 162;
					varDecl();
					}
					break;
				case 2:
					{
					State = 163;
					funcDecl();
					}
					break;
				case 3:
					{
					State = 164;
					consructorDecl();
					}
					break;
				case 4:
					{
					State = 165;
					destructorDecl();
					}
					break;
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 171;
			Match(RBRACE);
			State = 172;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConsructorDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCPPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCPPParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCPPParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public ConsructorDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_consructorDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterConsructorDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitConsructorDecl(this);
		}
	}

	[RuleVersion(0)]
	public ConsructorDeclContext consructorDecl() {
		ConsructorDeclContext _localctx = new ConsructorDeclContext(Context, State);
		EnterRule(_localctx, 22, RULE_consructorDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(ID);
			State = 175;
			Match(LPAREN);
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3584L) != 0)) {
				{
				State = 176;
				paramList();
				}
			}

			State = 179;
			Match(RPAREN);
			State = 180;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCPPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCPPParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCPPParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public DestructorDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructorDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterDestructorDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitDestructorDecl(this);
		}
	}

	[RuleVersion(0)]
	public DestructorDeclContext destructorDecl() {
		DestructorDeclContext _localctx = new DestructorDeclContext(Context, State);
		EnterRule(_localctx, 24, RULE_destructorDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(T__1);
			State = 183;
			Match(ID);
			State = 184;
			Match(LPAREN);
			State = 185;
			Match(RPAREN);
			State = 186;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(MiniCPPParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCPPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(MiniCPPParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(MiniCPPParser.DECREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniCPPParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGN() { return GetToken(MiniCPPParser.PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_ASSIGN() { return GetToken(MiniCPPParser.MINUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_ASSIGN() { return GetToken(MiniCPPParser.MULT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN() { return GetToken(MiniCPPParser.DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MiniCPPParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MiniCPPParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCPPParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCPPParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MiniCPPParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MiniCPPParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(MiniCPPParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(MiniCPPParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MiniCPPParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MiniCPPParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MiniCPPParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MiniCPPParser.DIV, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 189;
				Match(AMP);
				State = 190;
				expr(10);
				}
				break;
			case 2:
				{
				State = 191;
				Match(ID);
				State = 192;
				_la = TokenStream.LA(1);
				if ( !(_la==INCREMENT || _la==DECREMENT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				{
				State = 193;
				_la = TokenStream.LA(1);
				if ( !(_la==INCREMENT || _la==DECREMENT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 194;
				Match(ID);
				}
				break;
			case 4:
				{
				State = 195;
				Match(ID);
				State = 196;
				Match(ASSIGN);
				State = 197;
				expr(7);
				}
				break;
			case 5:
				{
				State = 198;
				Match(ID);
				State = 199;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7864320L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 200;
				expr(6);
				}
				break;
			case 6:
				{
				State = 201;
				funcCall();
				}
				break;
			case 7:
				{
				State = 202;
				Match(NUMBER);
				}
				break;
			case 8:
				{
				State = 203;
				Match(STRING_LITERAL);
				}
				break;
			case 9:
				{
				State = 204;
				Match(LPAREN);
				State = 205;
				expr(0);
				State = 206;
				Match(RPAREN);
				}
				break;
			case 10:
				{
				State = 208;
				Match(ID);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 225;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 223;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 211;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 212;
						Match(AND);
						State = 213;
						expr(15);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 214;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 215;
						Match(OR);
						State = 216;
						expr(14);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 217;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 218;
						_la = TokenStream.LA(1);
						if ( !(_la==GREATER || _la==LESS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 219;
						expr(13);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 220;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 221;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 251658240L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 222;
						expr(12);
						}
						break;
					}
					} 
				}
				State = 227;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCPPParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCPPParser.COMMA, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 28, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			param();
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 229;
				Match(COMMA);
				State = 230;
				param();
				}
				}
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCPPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MiniCPPParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MiniCPPParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MiniCPPParser.STRING, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 30, RULE_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3584L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 237;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,48,240,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,1,0,4,0,34,8,0,11,0,12,0,35,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,3,1,50,8,1,1,2,1,2,1,2,1,3,1,3,3,3,57,8,3,1,3,1,3,1,3,
		3,3,62,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,76,8,4,
		1,5,1,5,1,5,1,5,3,5,82,8,5,1,5,1,5,5,5,86,8,5,10,5,12,5,89,9,5,1,5,1,5,
		1,6,1,6,1,6,1,6,1,6,5,6,98,8,6,10,6,12,6,101,9,6,3,6,103,8,6,1,6,1,6,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,114,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,3,7,128,8,7,1,7,1,7,3,7,132,8,7,1,7,1,7,1,7,1,7,1,7,3,
		7,139,8,7,1,7,1,7,3,7,143,8,7,1,8,1,8,5,8,147,8,8,10,8,12,8,150,9,8,1,
		8,1,8,1,9,1,9,3,9,156,8,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,5,
		10,167,8,10,10,10,12,10,170,9,10,1,10,1,10,1,10,1,11,1,11,1,11,3,11,178,
		8,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,3,13,210,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,5,13,224,8,13,10,13,12,13,227,9,13,1,14,1,14,1,14,5,
		14,232,8,14,10,14,12,14,235,9,14,1,15,1,15,1,15,1,15,0,1,26,16,0,2,4,6,
		8,10,12,14,16,18,20,22,24,26,28,30,0,7,1,0,9,11,2,0,26,26,28,28,1,0,19,
		22,1,0,9,12,1,0,36,37,1,0,41,42,1,0,24,27,270,0,33,1,0,0,0,2,49,1,0,0,
		0,4,51,1,0,0,0,6,54,1,0,0,0,8,75,1,0,0,0,10,77,1,0,0,0,12,92,1,0,0,0,14,
		142,1,0,0,0,16,144,1,0,0,0,18,153,1,0,0,0,20,159,1,0,0,0,22,174,1,0,0,
		0,24,182,1,0,0,0,26,209,1,0,0,0,28,228,1,0,0,0,30,236,1,0,0,0,32,34,3,
		2,1,0,33,32,1,0,0,0,34,35,1,0,0,0,35,33,1,0,0,0,35,36,1,0,0,0,36,37,1,
		0,0,0,37,38,5,0,0,1,38,1,1,0,0,0,39,50,3,6,3,0,40,50,3,8,4,0,41,50,3,10,
		5,0,42,50,3,14,7,0,43,50,3,4,2,0,44,50,3,18,9,0,45,46,3,12,6,0,46,47,5,
		39,0,0,47,50,1,0,0,0,48,50,3,20,10,0,49,39,1,0,0,0,49,40,1,0,0,0,49,41,
		1,0,0,0,49,42,1,0,0,0,49,43,1,0,0,0,49,44,1,0,0,0,49,45,1,0,0,0,49,48,
		1,0,0,0,50,3,1,0,0,0,51,52,5,3,0,0,52,53,5,15,0,0,53,5,1,0,0,0,54,56,7,
		0,0,0,55,57,7,1,0,0,56,55,1,0,0,0,56,57,1,0,0,0,57,58,1,0,0,0,58,61,5,
		13,0,0,59,60,5,18,0,0,60,62,3,26,13,0,61,59,1,0,0,0,61,62,1,0,0,0,62,63,
		1,0,0,0,63,64,5,39,0,0,64,7,1,0,0,0,65,66,5,13,0,0,66,67,5,18,0,0,67,68,
		3,26,13,0,68,69,5,39,0,0,69,76,1,0,0,0,70,71,5,13,0,0,71,72,7,2,0,0,72,
		73,3,26,13,0,73,74,5,39,0,0,74,76,1,0,0,0,75,65,1,0,0,0,75,70,1,0,0,0,
		76,9,1,0,0,0,77,78,7,3,0,0,78,79,5,13,0,0,79,81,5,43,0,0,80,82,3,28,14,
		0,81,80,1,0,0,0,81,82,1,0,0,0,82,83,1,0,0,0,83,87,5,45,0,0,84,86,3,2,1,
		0,85,84,1,0,0,0,86,89,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,90,1,0,0,
		0,89,87,1,0,0,0,90,91,5,46,0,0,91,11,1,0,0,0,92,93,5,13,0,0,93,102,5,43,
		0,0,94,99,3,26,13,0,95,96,5,47,0,0,96,98,3,26,13,0,97,95,1,0,0,0,98,101,
		1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,102,
		94,1,0,0,0,102,103,1,0,0,0,103,104,1,0,0,0,104,105,5,44,0,0,105,13,1,0,
		0,0,106,107,5,4,0,0,107,108,5,43,0,0,108,109,3,26,13,0,109,110,5,44,0,
		0,110,113,3,16,8,0,111,112,5,5,0,0,112,114,3,16,8,0,113,111,1,0,0,0,113,
		114,1,0,0,0,114,143,1,0,0,0,115,116,5,5,0,0,116,143,3,16,8,0,117,118,5,
		7,0,0,118,119,5,43,0,0,119,120,3,26,13,0,120,121,5,44,0,0,121,122,3,16,
		8,0,122,143,1,0,0,0,123,124,5,6,0,0,124,127,5,43,0,0,125,128,3,6,3,0,126,
		128,3,26,13,0,127,125,1,0,0,0,127,126,1,0,0,0,127,128,1,0,0,0,128,129,
		1,0,0,0,129,131,5,39,0,0,130,132,3,26,13,0,131,130,1,0,0,0,131,132,1,0,
		0,0,132,133,1,0,0,0,133,138,5,39,0,0,134,139,3,26,13,0,135,139,5,36,0,
		0,136,139,5,37,0,0,137,139,3,8,4,0,138,134,1,0,0,0,138,135,1,0,0,0,138,
		136,1,0,0,0,138,137,1,0,0,0,138,139,1,0,0,0,139,140,1,0,0,0,140,141,5,
		44,0,0,141,143,3,16,8,0,142,106,1,0,0,0,142,115,1,0,0,0,142,117,1,0,0,
		0,142,123,1,0,0,0,143,15,1,0,0,0,144,148,5,45,0,0,145,147,3,2,1,0,146,
		145,1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,151,1,
		0,0,0,150,148,1,0,0,0,151,152,5,46,0,0,152,17,1,0,0,0,153,155,5,8,0,0,
		154,156,3,26,13,0,155,154,1,0,0,0,155,156,1,0,0,0,156,157,1,0,0,0,157,
		158,5,39,0,0,158,19,1,0,0,0,159,160,5,1,0,0,160,161,5,13,0,0,161,168,5,
		45,0,0,162,167,3,6,3,0,163,167,3,10,5,0,164,167,3,22,11,0,165,167,3,24,
		12,0,166,162,1,0,0,0,166,163,1,0,0,0,166,164,1,0,0,0,166,165,1,0,0,0,167,
		170,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,171,1,0,0,0,170,168,1,
		0,0,0,171,172,5,46,0,0,172,173,5,39,0,0,173,21,1,0,0,0,174,175,5,13,0,
		0,175,177,5,43,0,0,176,178,3,28,14,0,177,176,1,0,0,0,177,178,1,0,0,0,178,
		179,1,0,0,0,179,180,5,44,0,0,180,181,3,16,8,0,181,23,1,0,0,0,182,183,5,
		2,0,0,183,184,5,13,0,0,184,185,5,43,0,0,185,186,5,44,0,0,186,187,3,16,
		8,0,187,25,1,0,0,0,188,189,6,13,-1,0,189,190,5,28,0,0,190,210,3,26,13,
		10,191,192,5,13,0,0,192,210,7,4,0,0,193,194,7,4,0,0,194,210,5,13,0,0,195,
		196,5,13,0,0,196,197,5,18,0,0,197,210,3,26,13,7,198,199,5,13,0,0,199,200,
		7,2,0,0,200,210,3,26,13,6,201,210,3,12,6,0,202,210,5,14,0,0,203,210,5,
		15,0,0,204,205,5,43,0,0,205,206,3,26,13,0,206,207,5,44,0,0,207,210,1,0,
		0,0,208,210,5,13,0,0,209,188,1,0,0,0,209,191,1,0,0,0,209,193,1,0,0,0,209,
		195,1,0,0,0,209,198,1,0,0,0,209,201,1,0,0,0,209,202,1,0,0,0,209,203,1,
		0,0,0,209,204,1,0,0,0,209,208,1,0,0,0,210,225,1,0,0,0,211,212,10,14,0,
		0,212,213,5,29,0,0,213,224,3,26,13,15,214,215,10,13,0,0,215,216,5,30,0,
		0,216,224,3,26,13,14,217,218,10,12,0,0,218,219,7,5,0,0,219,224,3,26,13,
		13,220,221,10,11,0,0,221,222,7,6,0,0,222,224,3,26,13,12,223,211,1,0,0,
		0,223,214,1,0,0,0,223,217,1,0,0,0,223,220,1,0,0,0,224,227,1,0,0,0,225,
		223,1,0,0,0,225,226,1,0,0,0,226,27,1,0,0,0,227,225,1,0,0,0,228,233,3,30,
		15,0,229,230,5,47,0,0,230,232,3,30,15,0,231,229,1,0,0,0,232,235,1,0,0,
		0,233,231,1,0,0,0,233,234,1,0,0,0,234,29,1,0,0,0,235,233,1,0,0,0,236,237,
		7,0,0,0,237,238,5,13,0,0,238,31,1,0,0,0,23,35,49,56,61,75,81,87,99,102,
		113,127,131,138,142,148,155,166,168,177,209,223,225,233
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
