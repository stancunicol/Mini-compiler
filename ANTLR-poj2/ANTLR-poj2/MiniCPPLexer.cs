//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MiniCPP.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MiniCPPLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, INCLUDE=4, IF=5, ELSE=6, FOR=7, WHILE=8, RETURN=9, 
		INT=10, FLOAT=11, DOUBLE=12, STR=13, VOID=14, ID=15, NUMBER=16, STRING_LITERAL=17, 
		LINE_COMMENT=18, BLOCK_COMMENT=19, WS=20, ASSIGN=21, PLUS_ASSIGN=22, MINUS_ASSIGN=23, 
		MULT_ASSIGN=24, DIV_ASSIGN=25, MOD_ASSIGN=26, PLUS=27, MINUS=28, STAR=29, 
		DIV=30, MOD=31, AND=32, OR=33, NOT=34, EQUAL=35, NOT_EQUAL=36, GREATER_EQUAL=37, 
		LESS_EQUAL=38, GREATER=39, LESS=40, INCREMENT=41, DECREMENT=42, SEMICOLON=43, 
		DOT=44, COMMA=45, LPAREN=46, RPAREN=47, LBRACE=48, RBRACE=49;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "INCLUDE", "IF", "ELSE", "FOR", "WHILE", "RETURN", 
		"INT", "FLOAT", "DOUBLE", "STR", "VOID", "ID", "NUMBER", "STRING_LITERAL", 
		"LINE_COMMENT", "BLOCK_COMMENT", "WS", "ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
		"MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "PLUS", "MINUS", "STAR", "DIV", 
		"MOD", "AND", "OR", "NOT", "EQUAL", "NOT_EQUAL", "GREATER_EQUAL", "LESS_EQUAL", 
		"GREATER", "LESS", "INCREMENT", "DECREMENT", "SEMICOLON", "DOT", "COMMA", 
		"LPAREN", "RPAREN", "LBRACE", "RBRACE"
	};


	public MiniCPPLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MiniCPPLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'struct'", "'const'", "'~'", "'#include'", "'if'", "'else'", "'for'", 
		"'while'", "'return'", "'int'", "'float'", "'double'", "'string'", "'void'", 
		null, null, null, null, null, null, "'='", "'+='", "'-='", "'*='", "'/='", 
		"'%='", "'+'", "'-'", "'*'", "'/'", "'%'", "'&&'", "'||'", "'!'", "'=='", 
		"'!='", "'>='", "'<='", "'>'", "'<'", "'++'", "'--'", "';'", "'.'", "','", 
		"'('", "')'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "INCLUDE", "IF", "ELSE", "FOR", "WHILE", "RETURN", 
		"INT", "FLOAT", "DOUBLE", "STR", "VOID", "ID", "NUMBER", "STRING_LITERAL", 
		"LINE_COMMENT", "BLOCK_COMMENT", "WS", "ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
		"MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "PLUS", "MINUS", "STAR", "DIV", 
		"MOD", "AND", "OR", "NOT", "EQUAL", "NOT_EQUAL", "GREATER_EQUAL", "LESS_EQUAL", 
		"GREATER", "LESS", "INCREMENT", "DECREMENT", "SEMICOLON", "DOT", "COMMA", 
		"LPAREN", "RPAREN", "LBRACE", "RBRACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCPP.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCPPLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,49,309,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,1,
		0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
		7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,
		1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,5,14,180,8,
		14,10,14,12,14,183,9,14,1,15,4,15,186,8,15,11,15,12,15,187,1,15,1,15,4,
		15,192,8,15,11,15,12,15,193,3,15,196,8,15,1,16,1,16,5,16,200,8,16,10,16,
		12,16,203,9,16,1,16,1,16,1,17,1,17,1,17,1,17,5,17,211,8,17,10,17,12,17,
		214,9,17,1,17,1,17,1,18,1,18,1,18,1,18,5,18,222,8,18,10,18,12,18,225,9,
		18,1,18,1,18,1,18,1,18,1,18,1,19,4,19,233,8,19,11,19,12,19,234,1,19,1,
		19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,
		24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,
		31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,
		36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,41,1,
		41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,
		48,1,48,1,223,0,49,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
		23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
		47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
		71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,
		95,48,97,49,1,0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
		1,0,48,57,3,0,10,10,13,13,34,34,2,0,10,10,13,13,3,0,9,10,13,13,32,32,316,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
		1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
		0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
		1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,1,99,1,0,0,
		0,3,106,1,0,0,0,5,112,1,0,0,0,7,114,1,0,0,0,9,123,1,0,0,0,11,126,1,0,0,
		0,13,131,1,0,0,0,15,135,1,0,0,0,17,141,1,0,0,0,19,148,1,0,0,0,21,152,1,
		0,0,0,23,158,1,0,0,0,25,165,1,0,0,0,27,172,1,0,0,0,29,177,1,0,0,0,31,185,
		1,0,0,0,33,197,1,0,0,0,35,206,1,0,0,0,37,217,1,0,0,0,39,232,1,0,0,0,41,
		238,1,0,0,0,43,240,1,0,0,0,45,243,1,0,0,0,47,246,1,0,0,0,49,249,1,0,0,
		0,51,252,1,0,0,0,53,255,1,0,0,0,55,257,1,0,0,0,57,259,1,0,0,0,59,261,1,
		0,0,0,61,263,1,0,0,0,63,265,1,0,0,0,65,268,1,0,0,0,67,271,1,0,0,0,69,273,
		1,0,0,0,71,276,1,0,0,0,73,279,1,0,0,0,75,282,1,0,0,0,77,285,1,0,0,0,79,
		287,1,0,0,0,81,289,1,0,0,0,83,292,1,0,0,0,85,295,1,0,0,0,87,297,1,0,0,
		0,89,299,1,0,0,0,91,301,1,0,0,0,93,303,1,0,0,0,95,305,1,0,0,0,97,307,1,
		0,0,0,99,100,5,115,0,0,100,101,5,116,0,0,101,102,5,114,0,0,102,103,5,117,
		0,0,103,104,5,99,0,0,104,105,5,116,0,0,105,2,1,0,0,0,106,107,5,99,0,0,
		107,108,5,111,0,0,108,109,5,110,0,0,109,110,5,115,0,0,110,111,5,116,0,
		0,111,4,1,0,0,0,112,113,5,126,0,0,113,6,1,0,0,0,114,115,5,35,0,0,115,116,
		5,105,0,0,116,117,5,110,0,0,117,118,5,99,0,0,118,119,5,108,0,0,119,120,
		5,117,0,0,120,121,5,100,0,0,121,122,5,101,0,0,122,8,1,0,0,0,123,124,5,
		105,0,0,124,125,5,102,0,0,125,10,1,0,0,0,126,127,5,101,0,0,127,128,5,108,
		0,0,128,129,5,115,0,0,129,130,5,101,0,0,130,12,1,0,0,0,131,132,5,102,0,
		0,132,133,5,111,0,0,133,134,5,114,0,0,134,14,1,0,0,0,135,136,5,119,0,0,
		136,137,5,104,0,0,137,138,5,105,0,0,138,139,5,108,0,0,139,140,5,101,0,
		0,140,16,1,0,0,0,141,142,5,114,0,0,142,143,5,101,0,0,143,144,5,116,0,0,
		144,145,5,117,0,0,145,146,5,114,0,0,146,147,5,110,0,0,147,18,1,0,0,0,148,
		149,5,105,0,0,149,150,5,110,0,0,150,151,5,116,0,0,151,20,1,0,0,0,152,153,
		5,102,0,0,153,154,5,108,0,0,154,155,5,111,0,0,155,156,5,97,0,0,156,157,
		5,116,0,0,157,22,1,0,0,0,158,159,5,100,0,0,159,160,5,111,0,0,160,161,5,
		117,0,0,161,162,5,98,0,0,162,163,5,108,0,0,163,164,5,101,0,0,164,24,1,
		0,0,0,165,166,5,115,0,0,166,167,5,116,0,0,167,168,5,114,0,0,168,169,5,
		105,0,0,169,170,5,110,0,0,170,171,5,103,0,0,171,26,1,0,0,0,172,173,5,118,
		0,0,173,174,5,111,0,0,174,175,5,105,0,0,175,176,5,100,0,0,176,28,1,0,0,
		0,177,181,7,0,0,0,178,180,7,1,0,0,179,178,1,0,0,0,180,183,1,0,0,0,181,
		179,1,0,0,0,181,182,1,0,0,0,182,30,1,0,0,0,183,181,1,0,0,0,184,186,7,2,
		0,0,185,184,1,0,0,0,186,187,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,
		195,1,0,0,0,189,191,5,46,0,0,190,192,7,2,0,0,191,190,1,0,0,0,192,193,1,
		0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,196,1,0,0,0,195,189,1,0,0,0,
		195,196,1,0,0,0,196,32,1,0,0,0,197,201,5,34,0,0,198,200,8,3,0,0,199,198,
		1,0,0,0,200,203,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,204,1,0,0,
		0,203,201,1,0,0,0,204,205,5,34,0,0,205,34,1,0,0,0,206,207,5,47,0,0,207,
		208,5,47,0,0,208,212,1,0,0,0,209,211,8,4,0,0,210,209,1,0,0,0,211,214,1,
		0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,212,1,0,0,0,
		215,216,6,17,0,0,216,36,1,0,0,0,217,218,5,47,0,0,218,219,5,42,0,0,219,
		223,1,0,0,0,220,222,9,0,0,0,221,220,1,0,0,0,222,225,1,0,0,0,223,224,1,
		0,0,0,223,221,1,0,0,0,224,226,1,0,0,0,225,223,1,0,0,0,226,227,5,42,0,0,
		227,228,5,47,0,0,228,229,1,0,0,0,229,230,6,18,0,0,230,38,1,0,0,0,231,233,
		7,5,0,0,232,231,1,0,0,0,233,234,1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,
		0,235,236,1,0,0,0,236,237,6,19,0,0,237,40,1,0,0,0,238,239,5,61,0,0,239,
		42,1,0,0,0,240,241,5,43,0,0,241,242,5,61,0,0,242,44,1,0,0,0,243,244,5,
		45,0,0,244,245,5,61,0,0,245,46,1,0,0,0,246,247,5,42,0,0,247,248,5,61,0,
		0,248,48,1,0,0,0,249,250,5,47,0,0,250,251,5,61,0,0,251,50,1,0,0,0,252,
		253,5,37,0,0,253,254,5,61,0,0,254,52,1,0,0,0,255,256,5,43,0,0,256,54,1,
		0,0,0,257,258,5,45,0,0,258,56,1,0,0,0,259,260,5,42,0,0,260,58,1,0,0,0,
		261,262,5,47,0,0,262,60,1,0,0,0,263,264,5,37,0,0,264,62,1,0,0,0,265,266,
		5,38,0,0,266,267,5,38,0,0,267,64,1,0,0,0,268,269,5,124,0,0,269,270,5,124,
		0,0,270,66,1,0,0,0,271,272,5,33,0,0,272,68,1,0,0,0,273,274,5,61,0,0,274,
		275,5,61,0,0,275,70,1,0,0,0,276,277,5,33,0,0,277,278,5,61,0,0,278,72,1,
		0,0,0,279,280,5,62,0,0,280,281,5,61,0,0,281,74,1,0,0,0,282,283,5,60,0,
		0,283,284,5,61,0,0,284,76,1,0,0,0,285,286,5,62,0,0,286,78,1,0,0,0,287,
		288,5,60,0,0,288,80,1,0,0,0,289,290,5,43,0,0,290,291,5,43,0,0,291,82,1,
		0,0,0,292,293,5,45,0,0,293,294,5,45,0,0,294,84,1,0,0,0,295,296,5,59,0,
		0,296,86,1,0,0,0,297,298,5,46,0,0,298,88,1,0,0,0,299,300,5,44,0,0,300,
		90,1,0,0,0,301,302,5,40,0,0,302,92,1,0,0,0,303,304,5,41,0,0,304,94,1,0,
		0,0,305,306,5,123,0,0,306,96,1,0,0,0,307,308,5,125,0,0,308,98,1,0,0,0,
		9,0,181,187,193,195,201,212,223,234,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
