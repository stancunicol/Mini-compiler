//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MiniCPP.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MiniCPPParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, INCLUDE=4, IF=5, ELSE=6, FOR=7, WHILE=8, RETURN=9, 
		INT=10, FLOAT=11, DOUBLE=12, STR=13, VOID=14, ID=15, NUMBER=16, STRING_LITERAL=17, 
		LINE_COMMENT=18, BLOCK_COMMENT=19, WS=20, ASSIGN=21, PLUS_ASSIGN=22, MINUS_ASSIGN=23, 
		MULT_ASSIGN=24, DIV_ASSIGN=25, MOD_ASSIGN=26, PLUS=27, MINUS=28, STAR=29, 
		DIV=30, MOD=31, AND=32, OR=33, NOT=34, EQUAL=35, NOT_EQUAL=36, GREATER_EQUAL=37, 
		LESS_EQUAL=38, GREATER=39, LESS=40, INCREMENT=41, DECREMENT=42, SEMICOLON=43, 
		DOT=44, COMMA=45, LPAREN=46, RPAREN=47, LBRACE=48, RBRACE=49;
	public const int
		RULE_program = 0, RULE_includeStmt = 1, RULE_varDecl = 2, RULE_funcDecl = 3, 
		RULE_paramList = 4, RULE_param = 5, RULE_structDecl = 6, RULE_statement = 7, 
		RULE_assignment = 8, RULE_constDecl = 9, RULE_constructorDecl = 10, RULE_destructorDecl = 11, 
		RULE_funcCall = 12, RULE_controlStruct = 13, RULE_returnStmt = 14, RULE_block = 15, 
		RULE_expr = 16;
	public static readonly string[] ruleNames = {
		"program", "includeStmt", "varDecl", "funcDecl", "paramList", "param", 
		"structDecl", "statement", "assignment", "constDecl", "constructorDecl", 
		"destructorDecl", "funcCall", "controlStruct", "returnStmt", "block", 
		"expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'struct'", "'const'", "'~'", "'#include'", "'if'", "'else'", "'for'", 
		"'while'", "'return'", "'int'", "'float'", "'double'", "'string'", "'void'", 
		null, null, null, null, null, null, "'='", "'+='", "'-='", "'*='", "'/='", 
		"'%='", "'+'", "'-'", "'*'", "'/'", "'%'", "'&&'", "'||'", "'!'", "'=='", 
		"'!='", "'>='", "'<='", "'>'", "'<'", "'++'", "'--'", "';'", "'.'", "','", 
		"'('", "')'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "INCLUDE", "IF", "ELSE", "FOR", "WHILE", "RETURN", 
		"INT", "FLOAT", "DOUBLE", "STR", "VOID", "ID", "NUMBER", "STRING_LITERAL", 
		"LINE_COMMENT", "BLOCK_COMMENT", "WS", "ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
		"MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "PLUS", "MINUS", "STAR", "DIV", 
		"MOD", "AND", "OR", "NOT", "EQUAL", "NOT_EQUAL", "GREATER_EQUAL", "LESS_EQUAL", 
		"GREATER", "LESS", "INCREMENT", "DECREMENT", "SEMICOLON", "DOT", "COMMA", 
		"LPAREN", "RPAREN", "LBRACE", "RBRACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCPP.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCPPParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniCPPParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniCPPParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniCPPParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IncludeStmtContext[] includeStmt() {
			return GetRuleContexts<IncludeStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeStmtContext includeStmt(int i) {
			return GetRuleContext<IncludeStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext[] funcDecl() {
			return GetRuleContexts<FuncDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext funcDecl(int i) {
			return GetRuleContext<FuncDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclContext[] structDecl() {
			return GetRuleContexts<StructDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclContext structDecl(int i) {
			return GetRuleContext<StructDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 70368744439734L) != 0)) {
				{
				State = 39;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 34;
					includeStmt();
					}
					break;
				case 2:
					{
					State = 35;
					funcDecl();
					}
					break;
				case 3:
					{
					State = 36;
					varDecl();
					}
					break;
				case 4:
					{
					State = 37;
					structDecl();
					}
					break;
				case 5:
					{
					State = 38;
					statement();
					}
					break;
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 44;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(MiniCPPParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MiniCPPParser.STRING_LITERAL, 0); }
		public IncludeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includeStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterIncludeStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitIncludeStmt(this);
		}
	}

	[RuleVersion(0)]
	public IncludeStmtContext includeStmt() {
		IncludeStmtContext _localctx = new IncludeStmtContext(Context, State);
		EnterRule(_localctx, 2, RULE_includeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			Match(INCLUDE);
			State = 47;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCPPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCPPParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MiniCPPParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MiniCPPParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(MiniCPPParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(MiniCPPParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniCPPParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDecl);
		int _la;
		try {
			State = 62;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 49;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15360L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 50;
				Match(ID);
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 51;
					Match(ASSIGN);
					State = 52;
					expr(0);
					}
				}

				State = 55;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 56;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15360L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 57;
				Match(ID);
				State = 58;
				Match(ASSIGN);
				State = 59;
				funcCall();
				State = 60;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCPPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCPPParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCPPParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MiniCPPParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MiniCPPParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(MiniCPPParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(MiniCPPParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(MiniCPPParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public FuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitFuncDecl(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclContext funcDecl() {
		FuncDeclContext _localctx = new FuncDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_funcDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 31744L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 65;
			Match(ID);
			State = 66;
			Match(LPAREN);
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 15360L) != 0)) {
				{
				State = 67;
				paramList();
				}
			}

			State = 70;
			Match(RPAREN);
			State = 71;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCPPParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCPPParser.COMMA, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 8, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			param();
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 74;
				Match(COMMA);
				State = 75;
				param();
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCPPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MiniCPPParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MiniCPPParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(MiniCPPParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(MiniCPPParser.STR, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 10, RULE_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15360L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 82;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCPPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCPPParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCPPParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCPPParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext[] funcDecl() {
			return GetRuleContexts<FuncDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext funcDecl(int i) {
			return GetRuleContext<FuncDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorDeclContext[] constructorDecl() {
			return GetRuleContexts<ConstructorDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorDeclContext constructorDecl(int i) {
			return GetRuleContext<ConstructorDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DestructorDeclContext[] destructorDecl() {
			return GetRuleContexts<DestructorDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DestructorDeclContext destructorDecl(int i) {
			return GetRuleContext<DestructorDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclContext[] structDecl() {
			return GetRuleContexts<StructDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclContext structDecl(int i) {
			return GetRuleContext<StructDeclContext>(i);
		}
		public StructDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterStructDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitStructDecl(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclContext structDecl() {
		StructDeclContext _localctx = new StructDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_structDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(T__0);
			State = 85;
			Match(ID);
			State = 86;
			Match(LBRACE);
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 64522L) != 0)) {
				{
				State = 92;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 87;
					varDecl();
					}
					break;
				case 2:
					{
					State = 88;
					funcDecl();
					}
					break;
				case 3:
					{
					State = 89;
					constructorDecl();
					}
					break;
				case 4:
					{
					State = 90;
					destructorDecl();
					}
					break;
				case 5:
					{
					State = 91;
					structDecl();
					}
					break;
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 97;
			Match(RBRACE);
			State = 98;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext funcDecl() {
			return GetRuleContext<FuncDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCPPParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ControlStructContext controlStruct() {
			return GetRuleContext<ControlStructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeStmtContext includeStmt() {
			return GetRuleContext<IncludeStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclContext structDecl() {
			return GetRuleContext<StructDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstDeclContext constDecl() {
			return GetRuleContext<ConstDeclContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		try {
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100;
				funcDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101;
				varDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				assignment();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 103;
				funcCall();
				State = 104;
				Match(SEMICOLON);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 106;
				controlStruct();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 107;
				returnStmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 108;
				includeStmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 109;
				structDecl();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 110;
				expr(0);
				State = 111;
				Match(SEMICOLON);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 113;
				constDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCPPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniCPPParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCPPParser.SEMICOLON, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(ID);
			State = 117;
			Match(ASSIGN);
			State = 118;
			expr(0);
			State = 119;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCPPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniCPPParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCPPParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MiniCPPParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MiniCPPParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(MiniCPPParser.STR, 0); }
		public ConstDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterConstDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitConstDecl(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclContext constDecl() {
		ConstDeclContext _localctx = new ConstDeclContext(Context, State);
		EnterRule(_localctx, 18, RULE_constDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(T__1);
			State = 122;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 11264L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 123;
			Match(ID);
			State = 124;
			Match(ASSIGN);
			State = 125;
			expr(0);
			State = 126;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCPPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCPPParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCPPParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public ConstructorDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterConstructorDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitConstructorDecl(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclContext constructorDecl() {
		ConstructorDeclContext _localctx = new ConstructorDeclContext(Context, State);
		EnterRule(_localctx, 20, RULE_constructorDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(ID);
			State = 129;
			Match(LPAREN);
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 15360L) != 0)) {
				{
				State = 130;
				paramList();
				}
			}

			State = 133;
			Match(RPAREN);
			State = 134;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCPPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCPPParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCPPParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public DestructorDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructorDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterDestructorDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitDestructorDecl(this);
		}
	}

	[RuleVersion(0)]
	public DestructorDeclContext destructorDecl() {
		DestructorDeclContext _localctx = new DestructorDeclContext(Context, State);
		EnterRule(_localctx, 22, RULE_destructorDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(T__2);
			State = 137;
			Match(ID);
			State = 138;
			Match(LPAREN);
			State = 139;
			Match(RPAREN);
			State = 140;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCPPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCPPParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCPPParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCPPParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCPPParser.COMMA, i);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 24, RULE_funcCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(ID);
			State = 143;
			Match(LPAREN);
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 70368744407040L) != 0)) {
				{
				State = 144;
				expr(0);
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 145;
					Match(COMMA);
					State = 146;
					expr(0);
					}
					}
					State = 151;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 154;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlStructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MiniCPPParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCPPParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCPPParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MiniCPPParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MiniCPPParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MiniCPPParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(MiniCPPParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(MiniCPPParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public ControlStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlStruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterControlStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitControlStruct(this);
		}
	}

	[RuleVersion(0)]
	public ControlStructContext controlStruct() {
		ControlStructContext _localctx = new ControlStructContext(Context, State);
		EnterRule(_localctx, 26, RULE_controlStruct);
		int _la;
		try {
			State = 189;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 156;
				Match(IF);
				State = 157;
				Match(LPAREN);
				State = 158;
				expr(0);
				State = 159;
				Match(RPAREN);
				State = 160;
				block();
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 161;
					Match(ELSE);
					State = 162;
					block();
					}
				}

				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 165;
				Match(WHILE);
				State = 166;
				Match(LPAREN);
				State = 167;
				expr(0);
				State = 168;
				Match(RPAREN);
				State = 169;
				block();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 171;
				Match(FOR);
				State = 172;
				Match(LPAREN);
				State = 176;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 173;
					varDecl();
					}
					break;
				case 2:
					{
					State = 174;
					assignment();
					}
					break;
				case 3:
					{
					State = 175;
					expr(0);
					}
					break;
				}
				State = 178;
				Match(SEMICOLON);
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 70368744407040L) != 0)) {
					{
					State = 179;
					expr(0);
					}
				}

				State = 182;
				Match(SEMICOLON);
				State = 185;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 183;
					assignment();
					}
					break;
				case 2:
					{
					State = 184;
					expr(0);
					}
					break;
				}
				State = 187;
				Match(RPAREN);
				State = 188;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MiniCPPParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCPPParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_returnStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(RETURN);
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 70368744407040L) != 0)) {
				{
				State = 192;
				expr(0);
				}
			}

			State = 195;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCPPParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCPPParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(LBRACE);
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 70368744439734L) != 0)) {
				{
				{
				State = 198;
				statement();
				}
				}
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 204;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCPPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MiniCPPParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MiniCPPParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCPPParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCPPParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MiniCPPParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MiniCPPParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MiniCPPParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MiniCPPParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MiniCPPParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(MiniCPPParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUAL() { return GetToken(MiniCPPParser.GREATER_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(MiniCPPParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUAL() { return GetToken(MiniCPPParser.LESS_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(MiniCPPParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(MiniCPPParser.NOT_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MiniCPPParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MiniCPPParser.OR, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCPPListener typedListener = listener as IMiniCPPListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 207;
				Match(ID);
				}
				break;
			case 2:
				{
				State = 208;
				Match(NUMBER);
				}
				break;
			case 3:
				{
				State = 209;
				Match(STRING_LITERAL);
				}
				break;
			case 4:
				{
				State = 210;
				Match(LPAREN);
				State = 211;
				expr(0);
				State = 212;
				Match(RPAREN);
				}
				break;
			case 5:
				{
				State = 214;
				funcCall();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 231;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 229;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 217;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 218;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4160749568L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 219;
						expr(10);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 220;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 221;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2164663517184L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 222;
						expr(9);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 223;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 224;
						Match(AND);
						State = 225;
						expr(8);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 226;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 227;
						Match(OR);
						State = 228;
						expr(7);
						}
						break;
					}
					} 
				}
				State = 233;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 16: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,49,235,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,0,1,0,5,0,40,8,0,10,0,12,0,43,9,0,1,
		0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,3,2,54,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,3,2,63,8,2,1,3,1,3,1,3,1,3,3,3,69,8,3,1,3,1,3,1,3,1,4,1,4,1,4,5,4,77,
		8,4,10,4,12,4,80,9,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,93,
		8,6,10,6,12,6,96,9,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,3,7,115,8,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,10,1,10,1,10,3,10,132,8,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
		1,11,1,11,1,12,1,12,1,12,1,12,1,12,5,12,148,8,12,10,12,12,12,151,9,12,
		3,12,153,8,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,164,8,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,177,8,13,
		1,13,1,13,3,13,181,8,13,1,13,1,13,1,13,3,13,186,8,13,1,13,1,13,3,13,190,
		8,13,1,14,1,14,3,14,194,8,14,1,14,1,14,1,15,1,15,5,15,200,8,15,10,15,12,
		15,203,9,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,
		216,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,5,
		16,230,8,16,10,16,12,16,233,9,16,1,16,0,1,32,17,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,30,32,0,5,1,0,10,13,1,0,10,14,2,0,10,11,13,13,1,0,27,
		31,1,0,35,40,262,0,41,1,0,0,0,2,46,1,0,0,0,4,62,1,0,0,0,6,64,1,0,0,0,8,
		73,1,0,0,0,10,81,1,0,0,0,12,84,1,0,0,0,14,114,1,0,0,0,16,116,1,0,0,0,18,
		121,1,0,0,0,20,128,1,0,0,0,22,136,1,0,0,0,24,142,1,0,0,0,26,189,1,0,0,
		0,28,191,1,0,0,0,30,197,1,0,0,0,32,215,1,0,0,0,34,40,3,2,1,0,35,40,3,6,
		3,0,36,40,3,4,2,0,37,40,3,12,6,0,38,40,3,14,7,0,39,34,1,0,0,0,39,35,1,
		0,0,0,39,36,1,0,0,0,39,37,1,0,0,0,39,38,1,0,0,0,40,43,1,0,0,0,41,39,1,
		0,0,0,41,42,1,0,0,0,42,44,1,0,0,0,43,41,1,0,0,0,44,45,5,0,0,1,45,1,1,0,
		0,0,46,47,5,4,0,0,47,48,5,17,0,0,48,3,1,0,0,0,49,50,7,0,0,0,50,53,5,15,
		0,0,51,52,5,21,0,0,52,54,3,32,16,0,53,51,1,0,0,0,53,54,1,0,0,0,54,55,1,
		0,0,0,55,63,5,43,0,0,56,57,7,0,0,0,57,58,5,15,0,0,58,59,5,21,0,0,59,60,
		3,24,12,0,60,61,5,43,0,0,61,63,1,0,0,0,62,49,1,0,0,0,62,56,1,0,0,0,63,
		5,1,0,0,0,64,65,7,1,0,0,65,66,5,15,0,0,66,68,5,46,0,0,67,69,3,8,4,0,68,
		67,1,0,0,0,68,69,1,0,0,0,69,70,1,0,0,0,70,71,5,47,0,0,71,72,3,30,15,0,
		72,7,1,0,0,0,73,78,3,10,5,0,74,75,5,45,0,0,75,77,3,10,5,0,76,74,1,0,0,
		0,77,80,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,0,79,9,1,0,0,0,80,78,1,0,0,0,
		81,82,7,0,0,0,82,83,5,15,0,0,83,11,1,0,0,0,84,85,5,1,0,0,85,86,5,15,0,
		0,86,94,5,48,0,0,87,93,3,4,2,0,88,93,3,6,3,0,89,93,3,20,10,0,90,93,3,22,
		11,0,91,93,3,12,6,0,92,87,1,0,0,0,92,88,1,0,0,0,92,89,1,0,0,0,92,90,1,
		0,0,0,92,91,1,0,0,0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,97,1,
		0,0,0,96,94,1,0,0,0,97,98,5,49,0,0,98,99,5,43,0,0,99,13,1,0,0,0,100,115,
		3,6,3,0,101,115,3,4,2,0,102,115,3,16,8,0,103,104,3,24,12,0,104,105,5,43,
		0,0,105,115,1,0,0,0,106,115,3,26,13,0,107,115,3,28,14,0,108,115,3,2,1,
		0,109,115,3,12,6,0,110,111,3,32,16,0,111,112,5,43,0,0,112,115,1,0,0,0,
		113,115,3,18,9,0,114,100,1,0,0,0,114,101,1,0,0,0,114,102,1,0,0,0,114,103,
		1,0,0,0,114,106,1,0,0,0,114,107,1,0,0,0,114,108,1,0,0,0,114,109,1,0,0,
		0,114,110,1,0,0,0,114,113,1,0,0,0,115,15,1,0,0,0,116,117,5,15,0,0,117,
		118,5,21,0,0,118,119,3,32,16,0,119,120,5,43,0,0,120,17,1,0,0,0,121,122,
		5,2,0,0,122,123,7,2,0,0,123,124,5,15,0,0,124,125,5,21,0,0,125,126,3,32,
		16,0,126,127,5,43,0,0,127,19,1,0,0,0,128,129,5,15,0,0,129,131,5,46,0,0,
		130,132,3,8,4,0,131,130,1,0,0,0,131,132,1,0,0,0,132,133,1,0,0,0,133,134,
		5,47,0,0,134,135,3,30,15,0,135,21,1,0,0,0,136,137,5,3,0,0,137,138,5,15,
		0,0,138,139,5,46,0,0,139,140,5,47,0,0,140,141,3,30,15,0,141,23,1,0,0,0,
		142,143,5,15,0,0,143,152,5,46,0,0,144,149,3,32,16,0,145,146,5,45,0,0,146,
		148,3,32,16,0,147,145,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,150,
		1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,152,144,1,0,0,0,152,153,1,0,0,
		0,153,154,1,0,0,0,154,155,5,47,0,0,155,25,1,0,0,0,156,157,5,5,0,0,157,
		158,5,46,0,0,158,159,3,32,16,0,159,160,5,47,0,0,160,163,3,30,15,0,161,
		162,5,6,0,0,162,164,3,30,15,0,163,161,1,0,0,0,163,164,1,0,0,0,164,190,
		1,0,0,0,165,166,5,8,0,0,166,167,5,46,0,0,167,168,3,32,16,0,168,169,5,47,
		0,0,169,170,3,30,15,0,170,190,1,0,0,0,171,172,5,7,0,0,172,176,5,46,0,0,
		173,177,3,4,2,0,174,177,3,16,8,0,175,177,3,32,16,0,176,173,1,0,0,0,176,
		174,1,0,0,0,176,175,1,0,0,0,176,177,1,0,0,0,177,178,1,0,0,0,178,180,5,
		43,0,0,179,181,3,32,16,0,180,179,1,0,0,0,180,181,1,0,0,0,181,182,1,0,0,
		0,182,185,5,43,0,0,183,186,3,16,8,0,184,186,3,32,16,0,185,183,1,0,0,0,
		185,184,1,0,0,0,185,186,1,0,0,0,186,187,1,0,0,0,187,188,5,47,0,0,188,190,
		3,30,15,0,189,156,1,0,0,0,189,165,1,0,0,0,189,171,1,0,0,0,190,27,1,0,0,
		0,191,193,5,9,0,0,192,194,3,32,16,0,193,192,1,0,0,0,193,194,1,0,0,0,194,
		195,1,0,0,0,195,196,5,43,0,0,196,29,1,0,0,0,197,201,5,48,0,0,198,200,3,
		14,7,0,199,198,1,0,0,0,200,203,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,
		202,204,1,0,0,0,203,201,1,0,0,0,204,205,5,49,0,0,205,31,1,0,0,0,206,207,
		6,16,-1,0,207,216,5,15,0,0,208,216,5,16,0,0,209,216,5,17,0,0,210,211,5,
		46,0,0,211,212,3,32,16,0,212,213,5,47,0,0,213,216,1,0,0,0,214,216,3,24,
		12,0,215,206,1,0,0,0,215,208,1,0,0,0,215,209,1,0,0,0,215,210,1,0,0,0,215,
		214,1,0,0,0,216,231,1,0,0,0,217,218,10,9,0,0,218,219,7,3,0,0,219,230,3,
		32,16,10,220,221,10,8,0,0,221,222,7,4,0,0,222,230,3,32,16,9,223,224,10,
		7,0,0,224,225,5,32,0,0,225,230,3,32,16,8,226,227,10,6,0,0,227,228,5,33,
		0,0,228,230,3,32,16,7,229,217,1,0,0,0,229,220,1,0,0,0,229,223,1,0,0,0,
		229,226,1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,33,
		1,0,0,0,233,231,1,0,0,0,22,39,41,53,62,68,78,92,94,114,131,149,152,163,
		176,180,185,189,193,201,215,229,231
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
